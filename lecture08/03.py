"""
3. Создайте собственный класс-исключение, который должен проверять
содержимое списка на наличие только чисел. Проверить работу исключения
на реальном примере. Необходимо запрашивать у пользователя данные и
заполнять список. Класс-исключение должен контролировать типы данных
элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются
бесконечно, пока пользователь сам не остановит работу скрипта, введя,
например, команду “stop”. При этом скрипт завершается, сформированный
список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить
только числа и строки. При вводе пользователем очередного элемента
необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить
пользователю ввести текст (не число) и отобразить соответствующее
сообщение. При этом работа скрипта не должна завершаться.
"""


class MyException(Exception):
    def __init__(self, *args):
        self.custom_err_txt = args[0]

    def __str__(self):
        if self.custom_err_txt:
            return self.custom_err_txt
        else:
            return "MyException custom exception raise."


result = []
while True:
    user_input = input("Please enter some number: ")
    try:
        if user_input == "stop":
            print(result)
            exit()
        elif user_input.isdigit():
            result.append(int(user_input))
            continue
        else:
            raise MyException("The number is not digit")
    except MyException as e:
        print(e.custom_err_txt)
